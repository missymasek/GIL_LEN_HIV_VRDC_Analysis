
/*****************************
Client :  0091GIL55-34
Purpose: VRDC code to pull claims
Preparer:
Checker:
******************************/


/*****************************
 1. Define File Directories 
******************************/

*Define local input, output, and temp directories;
*libname input "V:\091GIL\34 - LEN Landscape and Planning\Work Files\Data_Summaries\VRDC\Inputs";

%let StartingEnrollment = MBSF.MBSF_ABCD_2020;
%let BaseClaims = ;
%let out = SH054820;
%let pfx = MDC_BW;
%let pdeyr = 2020;
	
*Options and Libraries;
OPTIONS 
	obs=max			/* Specifies number of last observation to process */
	mprint 			/* Displays the SAS statements that are generated by macro execution. */
	mlogic 			/* Causes the macro processor to trace its execution and to write the trace information to the SAS log. */
	symbolgen; 		/* Displays the results of resolving macro variable references. */

*Define macro variable for Enrollment Fields;
%LET CatVarsEn = BENE_ID	RFRNC_YR  State_Code County_Cd ZIP_CD Age_At_End_Ref_Yr Sex_Ident_Cd COVSTART OREC CREC ESRD_IND 
				PTDCNTRCT01 PTDCNTRCT02 PTDCNTRCT03 PTDCNTRCT04 PTDCNTRCT05 PTDCNTRCT06 PTDCNTRCT07 PTDCNTRCT08 PTDCNTRCT09 PTDCNTRCT10 PTDCNTRCT11 PTDCNTRCT12 
				PTDPBPID01 PTDPBPID02 PTDPBPID03 PTDPBPID04 PTDPBPID05 PTDPBPID06 PTDPBPID07 PTDPBPID08 PTDPBPID09 PTDPBPID10 PTDPBPID11 PTDPBPID12 
				SGMTID01 SGMTID02 SGMTID03 SGMTID04 SGMTID05 SGMTID06 SGMTID07 SGMTID08 SGMTID09 SGMTID10 SGMTID11 SGMTID12 
				DUAL_01 DUAL_02 DUAL_03 DUAL_04 DUAL_05 DUAL_06 DUAL_07 DUAL_08 DUAL_09 DUAL_10 DUAL_11 DUAL_12 
				CST_SHR_GRP_CD_01 CST_SHR_GRP_CD_02 CST_SHR_GRP_CD_03 CST_SHR_GRP_CD_04 CST_SHR_GRP_CD_05 CST_SHR_GRP_CD_06 CST_SHR_GRP_CD_07 CST_SHR_GRP_CD_08 CST_SHR_GRP_CD_09 CST_SHR_GRP_CD_10 CST_SHR_GRP_CD_11 CST_SHR_GRP_CD_12;	

%LET CstShr = CST_SHR_GRP_CD_01 CST_SHR_GRP_CD_02 CST_SHR_GRP_CD_03 CST_SHR_GRP_CD_04 CST_SHR_GRP_CD_05 CST_SHR_GRP_CD_06 CST_SHR_GRP_CD_07 CST_SHR_GRP_CD_08 CST_SHR_GRP_CD_09 CST_SHR_GRP_CD_10 CST_SHR_GRP_CD_11 CST_SHR_GRP_CD_12;	
%LET DualCds = DUAL_STUS_CD_01 DUAL_STUS_CD_02 DUAL_STUS_CD_03 DUAL_STUS_CD_04 DUAL_STUS_CD_05 DUAL_STUS_CD_06 DUAL_STUS_CD_07 DUAL_STUS_CD_08 DUAL_STUS_CD_09 DUAL_STUS_CD_10 DUAL_STUS_CD_11 DUAL_STUS_CD_12;	

*Define macro variable for HIV;
%let HCPCS_hiv = 'J1746'; 
%let NDC_HIV = ('49702025018','62064012201','62064012202');


/**************************************************************************************************************8******
Identify member
Need to PULL targeted member from both Medical and Pharmacy Side
**********************************************************************************************************************/

/**********************************************
FFS Processing
************************************************/

/*IMPORT AND STACK REVENUE FILES and identify target patients*/

%macro inst_pull_monthly(TYPE,yr,yr2,mo);
/*BW Added  ) close parentheses to each statement and a ; at the end of overall set statement*/
data MSSP_Revenue_&TYPE._20&yr2.&mo.;
	set  RIFQ20&yr..&TYPE._revenue_&mo. 
			(	keep = bene_id clm_id CLM_THRU_DT HCPCS_CD
				rename = (CLM_THRU_DT = end)
				where = (hcpcs_cd = &HCPCS_hiv.)
			 )
		 RIFQ20&yr..hospice_revenue_&mo. 
			(	keep = bene_id clm_id REV_CNTR_DT HCPCS_CD
				rename = (REV_CNTR_DT = end)
				where = (hcpcs_cd = &HCPCS_hiv.)
			)
		RIFQ20&yr..hha_revenue_&mo.
			(	keep = bene_id clm_id REV_CNTR_DT HCPCS_CD
				rename = (REV_CNTR_DT = end)
				where = (hcpcs_cd = &HCPCS_hiv.)
			)
		RIFQ20&yr..outpatient_revenue_&mo.
			(	keep = bene_id clm_id REV_CNTR_DT HCPCS_CD
				rename = (REV_CNTR_DT = end)
				where = (hcpcs_cd = &HCPCS_hiv.)
			)
		RIFQ20&yr..bcarrier_line_&mo. 
			(	keep = bene_id clm_id LINE_LAST_EXPNS_DT HCPCS_CD
				rename = (LINE_LAST_EXPNS_DT = end)
				where = (hcpcs_cd = &HCPCS_hiv.)
			)
		 RIFQ20&yr..dme_line_&mo.
			(	keep = bene_id clm_id LINE_LAST_EXPNS_DT HCPCS_CD
				rename = (LINE_LAST_EXPNS_DT = end)
				where = (hcpcs_cd = &HCPCS_hiv.)
			);
			year = year(end);
run;

%mend inst_pull_monthly;

%macro inst_pull(yr,yr2);

%inst_pull_monthly(&yr.,&yr2.,01);
%inst_pull_monthly(&yr.,&yr2.,02);
%inst_pull_monthly(&yr.,&yr2.,03);
%inst_pull_monthly(&yr.,&yr2.,04);
%inst_pull_monthly(&yr.,&yr2.,05);
%inst_pull_monthly(&yr.,&yr2.,06);
%inst_pull_monthly(&yr.,&yr2.,07);
%inst_pull_monthly(&yr.,&yr2.,08);
%inst_pull_monthly(&yr.,&yr2.,09);
%inst_pull_monthly(&yr.,&yr2.,10);
%inst_pull_monthly(&yr.,&yr2.,11);
%inst_pull_monthly(&yr.,&yr2.,12);
%end;

%mend inst_pull;

%inst_pull(IP,20,20);
%inst_pull(OP,20,20);
%inst_pull(SNF,20,20);
%inst_pull(Hospice,20,20);
%inst_pull(HHA,20,20);
%inst_pull(Carrier,20,20);
%inst_pull(DME,20,20);

/*STACK REVENUE*/
data &out..Revenue_HIV;
	set MSSP_Revenue_:;
run;
/*Save memberlist*/
proc sql;
	create table &out..memberlist_FFS as 
	select distinct bene_id, year,'FFS' as Source 
	from &out..Revenue_HIV;
quit;


/******************
PDE Processing
********************/
%macro PULL_Member_PDE(mm,year);
proc sql;
	create table demo_&mm. as select 
		distinct 
    	BENE_ID,
		year(SRVC_DT) as Year
	from pde&year..PDE_DEMO_&year._&mm. 
	where substr(PROD_SRVC_ID,1,11) in &NDC_HIV.;
quit;
%mend;


%PULL_Member_PDE(01,2020);
%PULL_Member_PDE(02,2020);
%PULL_Member_PDE(03,2020);
%PULL_Member_PDE(04,2020);
%PULL_Member_PDE(05,2020);
%PULL_Member_PDE(06,2020);
%PULL_Member_PDE(07,2020);
%PULL_Member_PDE(08,2020);
%PULL_Member_PDE(09,2020);
%PULL_Member_PDE(10,2020);
%PULL_Member_PDE(11,2020);
%PULL_Member_PDE(12,2020);

/*STACK REVENUE*/
data &out..demo_HIV;
	set demo_:;
run;
/*Save memberlist*/
proc sql;
	create table &out..memberlist_PDE as 
	select distinct bene_id, year,'PDE' as Source 
	from &out..demo_HIV;
quit;


/*FULL MEMBER LIST*/
DATA &out..memberlist_2020;
	set &out..memberlist_PDE
		&out..memberlist_FFS;
run;


/************************
*Enrollment processing*
************************/

/***************************************************************
Enrollment Files  
**************************************************************/

/** Summarize MM's Across all Fields*/


data out..&pfx._StartEnrollTemp;
	set set &StartingEnrollment.;

	array MDCR_Status_CODE_ (12) MDCR_Status_CODE_01-MDCR_Status_CODE_12 ;
	array CST_SHR_GRP_CD_ (12) CST_SHR_GRP_CD_01-CST_SHR_GRP_CD_12;
	array PTC_CNTRCT_ID_ (12) PTC_CNTRCT_ID_01-PTC_CNTRCT_ID_12;
	array PTD_CNTRCT_ID_ (12) PTD_CNTRCT_ID_01-PTD_CNTRCT_ID_12;
	array LI (12) LI1-LI12;

	/*Get total LI and Dual Month for each member, note that we have total enroll in prior step*/
	/*Arrays were giving warning 'invalid numeric data' for N and Y values, swapping to 1/0*/
	do i = 1 to 12;
		if CST_SHR_GRP_CD_[i] in  ('09','10','13') then LI[i] = 0;
			else LI[i] =1;
	end;

if ESRD_Ind = '0';	
run;


/*Reformat enrollment*/
%macro MonthlyEnroll(Month, MonthNum);
proc sql;
create table Member_Enroll_&month. as 
	select 
	BENE_ID,
	"&month." as Month format $2.,
	COALESCE(PTC_CNTRCT_ID_&month.,PTC_CNTRCT_ID_&month.) as Contract,
	COALESCE(PTD_PBP_ID_&month.,PTD_PBP_ID_&month.) as PBP,
	LI&MonthNum. as LI,
	case when PTD_CNTRCT_ID_&month. in ('') then 0 else 1 end as Enroll_D_only,
	1 as Enroll
from out..&pfx._StartEnrollTemp where PTC_CNTRCT_ID_&month. not in ('') or PTD_PBP_ID_&month. not in ('');
quit;
%mend;

%MonthlyEnroll(01,1);
%MonthlyEnroll(02,2);
%MonthlyEnroll(03,3);
%MonthlyEnroll(04,4);
%MonthlyEnroll(05,5);
%MonthlyEnroll(06,6);
%MonthlyEnroll(07,7);
%MonthlyEnroll(08,8);
%MonthlyEnroll(09,9);
%MonthlyEnroll(10,10);
%MonthlyEnroll(11,11);
%MonthlyEnroll(12,12);

/*Stack all tables*/
data &out..&pfx._Member_Enroll_Full;	
set Member_Enroll_01 - Member_Enroll_12;

if substr(b.contract,1,1)in ('S') then Plan_Type = 'PDP'; 
else if substr(b.contract,1,1) in ('H')  Plan_Type = 'MAPD' ;
else Plan_Type = 'OTH';

run;

/*BW Dropping monthly tables to save space*/
proc sql;
	drop table Member_Enroll_01;	drop table Member_Enroll_02;	drop table Member_Enroll_03;
	drop table Member_Enroll_04;	drop table Member_Enroll_05;	drop table Member_Enroll_06;
	drop table Member_Enroll_07;	drop table Member_Enroll_08;	drop table Member_Enroll_09;
	drop table Member_Enroll_10;	drop table Member_Enroll_11;	drop table Member_Enroll_12;
quit;

* Limit to HIV membe to shrink data size;
data &out..&pfx._Member_Enroll;
set &out..&pfx._Member_Enroll_Full;
	if _n_ eq 1 then do;
			declare hash HIV_m(dataset:"&out..memberlist_2020");
			rc =  HIV_m.definekey ("BENE_ID");
			rc =  HIV_m.definedata (); 
			rc =  HIV_m.definedone ();
	end;
		rc= HIV_m.find();
		If rc=0 then HIV_Member = 1; else HIV_Member = 0;
	Drop rc;
if HIV_Member = 1;
run;


proc sql;
	drop table out..&pfx._StartEnrollTemp;
quit;


		
/**************************************************************************************************************8******
Get Claims for targeted members
Need to PULL targeted member from both Medical and Pharmacy Side
**********************************************************************************************************************/


/*************
PDE Files  
***************/

/***************************************************************
PDE Files  
**************************************************************/

/*GetPDE macro pulls PDe Pre-Extracted by Month*/
%macro Monthlydata_pde(mm,quar,year);	
proc sql;
	create table demo as select 
		&mm. as PDE_month,
    	a.BENE_ID,
		a.PDE_ID, /*PDE LINK*/
		a.BRND_GNRC_CD,
		substr(a.PROD_SRVC_ID,1,11) as NDC,
		a.DAYS_SUPLY_NUM,
        case when abs(a.DAYS_SUPLY_NUM) le 31 then '30'
            when abs(a.DAYS_SUPLY_NUM) gt 84 then '90' else '60' end as Day30_90,
    	a.PTNT_PAY_AMT,
    	a.QTY_DSPNSD_NUM,
    	a.TOT_RX_CST_AMT as Total_Drug_Cost_amt,
		a.SRVC_DT as SRVC_DT format mmddyy10.,
		case when a.SRVC_DT is not null then put(month(a.SRVC_DT),z2.) else '00' end as month format $2.,	
        case when a.DAYS_SUPLY_NUM < 0 then -1 else 1 end as scripts
	from pde&year..PDE_DEMO_&year._&mm. a /*where a.year = &year.*/
	order by a.bene_id, a.pde_id,a.SRVC_DT;


	create table encrypt_link as select 
    	a.BENE_ID,
		a.PDE_ID,
		a.SRVC_DT as SRVC_DT format mmddyy10. ,
		a.PLAN_CNTRCT_REC_ID as Contract,
    	a.PLAN_PBP_REC_NUM as PBP
    from pde&year..PDE_ENCRYPT_LINK_&year._&mm. a
	order by a.bene_id, a.pde_id,a.SRVC_DT;

	create table dispensing as select 
		a.BENE_ID,
		a.PDE_ID,
		a.DSPNSNG_STUS_CD, /*Partial/full fill*/
		case when a.PHRMCY_SRVC_TYPE_CD = '01' then 'Retail'
			 when a.PHRMCY_SRVC_TYPE_CD = '06' then 'Mail' 
			 /*when  a.PHRMCY_SRVC_TYPE_CD = '04' then 'INST' Institutional claims*/
			 else 'Other' end as PHRMCY_SRVC_TYPE,
		a.SRVC_DT as SRVC_DT format mmddyy10.
		from pde&year..PDE_DISPENSING_&year._&mm. a
	order by a.bene_id, a.pde_id,a.SRVC_DT;


	create table pmt_dtls as select 
		a.BENE_ID,
		a.PDE_ID,
		a.SRVC_DT,
		/*a.BENEFIT_PHASE, really detailed*/
		/*a.CTSTRPHC_CVRG_CD,Catastrophic Coverage Code*/
		a.CVRD_D_PLAN_PD_AMT as CPP_amt,
		a.NCVRD_PLAN_PD_AMT as NPP_amt,
		a.GDC_ABV_OOPT_AMT as GDCA_amt,
		a.GDC_BLW_OOPT_AMT as GDCB_amt,
		a.LICS_AMT,
		a.OTHR_TROOP_AMT,
		a.PLRO_AMT,
		a.RPTD_GAP_DSCNT_NUM as CGDP_amt 
		from pde&year..PDE_PMT_DTLS_&year._&mm. a
	order by a.bene_id, a.pde_id,a.SRVC_DT;
quit;


data pde_stacked_&year._&mm.;
	merge demo encrypt_link pmt_dtls dispensing;
	by bene_id pde_id SRVC_DT;
run;

proc sql;
	drop table demo;
	drop table encrypt_link;
	drop table pmt_dtls;
	drop table dispensing;
quit;


data pde_stacked_&year._HIV_&mm.;	
set pde_stacked_&year._&mm.;

	length drug_type $3.;
	if _n_ eq 1 then do;
			declare hash FAT(dataset:"_uplds.ndc_map");	
			rc =  FAT.definekey ("NDC");
			rc =  FAT.definedata ("drug_type"); 
			rc =  FAT.definedone ();
	end;
		rc= FAT.find();
		If rc=0 then In_FAT = 1; else In_FAT = 0;
	Drop rc;


	if _n_ eq 1 then do;
			declare hash HIV_m(dataset:"&out..memberlist_2020");
			rc =  HIV_m.definekey ("BENE_ID");
			rc =  HIV_m.definedata (); 
			rc =  HIV_m.definedone ();
	end;
		rc= HIV_m.find();
		If rc=0 then HIV_Member = 1; else HIV_Member = 0;
	Drop rc;

*LImit to HIV member;
	if HIV_Member = 1;
run;


proc sql; drop table  pde_stacked_&year._&mm.; quit;

%mend;


%Monthlydata_pde(01,Q1,2020);
%Monthlydata_pde(02,Q1,2020);
%Monthlydata_pde(03,Q1,2020);
%Monthlydata_pde(04,Q2,2020);
%Monthlydata_pde(05,Q2,2020);
%Monthlydata_pde(06,Q2,2020);
%Monthlydata_pde(07,Q3,2020);
%Monthlydata_pde(08,Q3,2020);
%Monthlydata_pde(09,Q3,2020);
%Monthlydata_pde(10,Q4,2020);
%Monthlydata_pde(11,Q4,2020);
%Monthlydata_pde(12,Q4,2020);


/*Stack all tables*/
data &out..&pfx._pde_&pdeyr.;	
set pde_stacked_&pdeyr._HIV_01 - pde_stacked_&pdeyr._HIV_12;

	* Develop B_G flag;
	length B_G $3.;
	if Drug_Type in ("GEN") then B_G = "G";
	else if Drug_Type in ("SSB","MSB") then B_G="B";
	else B_G = "UNK";

	
	if NDC in ('49702025018') then Drug = 'RUKOBIA';
	else if NDC in ('62064012201','62064012202') then Drug ='TROGARZO';
	else Drug = 'Other';
	
run;


/*********************************************************
FFS Processing
**************************************************************/

*Pull claims;

%macro process1(libs,type,typetext,yr,yr2,mo);

/*CLAIMS TABLES THAT HAVE EVERYTHING*/
%if &typetext. = "inpatient" or &typetext. = "SNF" %then %do;

proc sql;

	create table MSSP_claims_&type._&yr2._&mo. as
	select a. bene_id,
			a. CLM_ID,
			a. DOB_DT,
			year(a.CLM_THRU_DT) as year,
			year(a.CLM_THRU_DT) * 100 + month(a.CLM_THRU_DT) as yearmo, 
			&typetext. as POS,
/*Procedure Codes*/			
			a. PRNCPAL_DGNS_CD,
			a. ICD_DGNS_CD1,
			a. ICD_DGNS_CD2,
			a. ICD_DGNS_CD3,
			a. ICD_DGNS_CD4,
			a. ICD_DGNS_CD5,
			a. ICD_DGNS_CD6,
			a. ICD_DGNS_CD7,
			a. ICD_DGNS_CD8,
			a. ICD_DGNS_CD9,
			a. ICD_DGNS_CD10,
			a. ICD_DGNS_CD11,
			a. ICD_DGNS_CD12,
			a. ICD_DGNS_CD13,
			a. ICD_DGNS_CD14,
			a. ICD_DGNS_CD15,
			a. ICD_DGNS_CD16,
			a. ICD_DGNS_CD17,
			a. ICD_DGNS_CD18,
			a. ICD_DGNS_CD19,
			a. ICD_DGNS_CD20,
			a. ICD_DGNS_CD21,
			a. ICD_DGNS_CD22,
			a. ICD_DGNS_CD23,
			a. ICD_DGNS_CD24,
			a. ICD_DGNS_CD25,
/*Diagnosis Codes*/			
			a. ICD_PRCDR_CD1,
			a. ICD_PRCDR_CD2,
			a. ICD_PRCDR_CD3,
			a. ICD_PRCDR_CD4,
			a. ICD_PRCDR_CD5,
			a. ICD_PRCDR_CD6,
			a. ICD_PRCDR_CD7,
			a. ICD_PRCDR_CD8,
			a. ICD_PRCDR_CD9,
			a. ICD_PRCDR_CD10,
			a. ICD_PRCDR_CD11,
			a. ICD_PRCDR_CD12,
			a. ICD_PRCDR_CD13,
			a. ICD_PRCDR_CD14,
			a. ICD_PRCDR_CD15,
			a. ICD_PRCDR_CD16,
			a. ICD_PRCDR_CD17,
			a. ICD_PRCDR_CD18,
			a. ICD_PRCDR_CD19,
			a. ICD_PRCDR_CD20,
			a. ICD_PRCDR_CD21,
			a. ICD_PRCDR_CD22,
			a. ICD_PRCDR_CD23,
			a. ICD_PRCDR_CD24,
			a. ICD_PRCDR_CD25,
/*DRG*/
			a. CLM_DRG_CD,
			c. HCPCS,
/*Add dollars*/
			a.CLM_TOT_CHRG_AMT,
			a.CLM_PMT_AMT,
			a.CLM_PMT_AMT + a.CLM_PASS_THRU_PER_DIEM_AMT * a.CLM_UTLZTN_DAY_CNT as Cal_TOTAL_Clm_amt,
			a.NCH_BENE_IP_DDCTBL_AMT,
			a.NCH_BENE_PTA_COINSRNC_LBLTY_AM,
			a.NCH_PRMRY_PYR_CLM_PD_AMT,
            0 as NCH_BENE_PTB_DDCTBL_AMT,
			0 as NCH_BENE_PTB_COINSRNC_AMT,
			0 as CLM_OP_PRVDR_PMT_AMT AS PRVDR_PMT,
			0 as CLM_OP_BENE_PMT_AMT as BENE_PMT,
			d.REV_CNTR_TOT_CHRG_AMT
	from &libs..&type._claims_&mo. as a
	/*limit to target memebr*/ 
	inner join &out..memberlist_2020 as b on a.bene_id = b.bene_id /*and year(a.CLM_THRU_DT) = b.year*/ 
	/*Identify HIV claims*/
	left join  &out..Revenue_HIV c on a.Bene_id = c.bene_id and a.clm_id = c.clm_id
	left join RIFQ20&yr..&TYPE._revenue_&mo. d on a.Bene_id = d.bene_id and a.clm_id = d.clm_id
	where a. CLM_MDCR_NON_PMT_RSN_CD = ''
	and a. clm_pmt_amt > 0;

quit;

%end;

/*CLAIMS TABLES THAT DO NOT HAVE PROCEDURE CODES*/	/*BW prev said Diagnooses but that wasn't accurate*/
%else %if &typetext. = "HHA" or &typetext. = "hospice" %then %do;

proc sql;

	create table MSSP_claims_&type._&yr2._&mo. as
	select a. bene_id,
			a. CLM_ID,
			a. DOB_DT,
			year(a.CLM_THRU_DT) as year,
			year(a.CLM_THRU_DT) * 100 + month(a.CLM_THRU_DT) as yearmo, 
			&typetext. as POS,
/*Procedure Codes*/			
			a. PRNCPAL_DGNS_CD,
			a. ICD_DGNS_CD1,
			a. ICD_DGNS_CD2,
			a. ICD_DGNS_CD3,
			a. ICD_DGNS_CD4,
			a. ICD_DGNS_CD5,
			a. ICD_DGNS_CD6,
			a. ICD_DGNS_CD7,
			a. ICD_DGNS_CD8,
			a. ICD_DGNS_CD9,
			a. ICD_DGNS_CD10,
			a. ICD_DGNS_CD11,
			a. ICD_DGNS_CD12,
			a. ICD_DGNS_CD13,
			a. ICD_DGNS_CD14,
			a. ICD_DGNS_CD15,
			a. ICD_DGNS_CD16,
			a. ICD_DGNS_CD17,
			a. ICD_DGNS_CD18,
			a. ICD_DGNS_CD19,
			a. ICD_DGNS_CD20,
			a. ICD_DGNS_CD21,
			a. ICD_DGNS_CD22,
			a. ICD_DGNS_CD23,
			a. ICD_DGNS_CD24,
			a. ICD_DGNS_CD25,
/*Diagnosis Codes*/			
		"NA" as ICD_PRCDR_CD1,
		"NA" as ICD_PRCDR_CD2,
		"NA" as ICD_PRCDR_CD3,
		"NA" as ICD_PRCDR_CD4,
		"NA" as ICD_PRCDR_CD5,
		"NA" as ICD_PRCDR_CD6,
		"NA" as ICD_PRCDR_CD7,
		"NA" as ICD_PRCDR_CD8,
		"NA" as ICD_PRCDR_CD9,
		"NA" as ICD_PRCDR_CD10,
		"NA" as ICD_PRCDR_CD11,
		"NA" as ICD_PRCDR_CD12,
		"NA" as ICD_PRCDR_CD13,
		"NA" as ICD_PRCDR_CD14,
		"NA" as ICD_PRCDR_CD15,
		"NA" as ICD_PRCDR_CD16,
		"NA" as ICD_PRCDR_CD17,
		"NA" as ICD_PRCDR_CD18,
		"NA" as ICD_PRCDR_CD19,
		"NA" as ICD_PRCDR_CD20,
		"NA" as ICD_PRCDR_CD21,
		"NA" as ICD_PRCDR_CD22,
		"NA" as ICD_PRCDR_CD23,
		"NA" as ICD_PRCDR_CD24,
		"NA" as ICD_PRCDR_CD25,

/*DRG*/
			"NA" as CLM_DRG_CD,
			c.HCPCS,
/*Add dollars*/
			a.CLM_TOT_CHRG_AMT,
			a.CLM_PMT_AMT,
			0 as CAL_TOTAL_Clm_amt,
			0 as NCH_BENE_IP_DDCTBL_AMT,
			0 as NCH_BENE_PTA_COINSRNC_LBLTY_AM,
			a.NCH_PRMRY_PYR_CLM_PD_AMT,
            0 as NCH_BENE_PTB_DDCTBL_AMT,
			0 as NCH_BENE_PTB_COINSRNC_AMT,
			0 as PRVDR_PMT,
			0 as BENE_PMT,
			d.REV_CNTR_TOT_CHRG_AMT
	from &libs..&type._claims_&mo. as a
	/*limit to target memebr*/ 
	inner join &out..memberlist_2020 as b on a.bene_id = b.bene_id /*and year(a.CLM_THRU_DT) = b.year*/ 
	/*Identify HIV claims*/
	left join  &out..Revenue_HIV c on a.Bene_id = c.bene_id and a.clm_id = c.clm_id
	left join  RIFQ20&yr..&TYPE._revenue_&mo. d on a.Bene_id = d.bene_id and a.clm_id = d.clm_id
	where a. CLM_MDCR_NON_PMT_RSN_CD = ''
	and a. clm_pmt_amt > 0;
quit;

%end;

/*CLAIMS TABLES THAT DO NOT HAVE DRG*/
%else %if &typetext. = "outpatient" /*or &typetext. = "hospice"*/ %then %do;	/*BW Hosppice doesn't have ICD  PRCDR*/

proc sql;

	create table MSSP_claims_&type._&yr2._&mo. as
	select a. bene_id,
			a. CLM_ID,
			a. DOB_DT,
			year(a.CLM_THRU_DT) as year,
			year(a.CLM_THRU_DT) * 100 + month(a.CLM_THRU_DT) as yearmo, 
			&typetext. as POS,
/*Procedure Codes*/			
			a. PRNCPAL_DGNS_CD,
			a. ICD_DGNS_CD1,
			a. ICD_DGNS_CD2,
			a. ICD_DGNS_CD3,
			a. ICD_DGNS_CD4,
			a. ICD_DGNS_CD5,
			a. ICD_DGNS_CD6,
			a. ICD_DGNS_CD7,
			a. ICD_DGNS_CD8,
			a. ICD_DGNS_CD9,
			a. ICD_DGNS_CD10,
			a. ICD_DGNS_CD11,
			a. ICD_DGNS_CD12,
			a. ICD_DGNS_CD13,
			a. ICD_DGNS_CD14,
			a. ICD_DGNS_CD15,
			a. ICD_DGNS_CD16,
			a. ICD_DGNS_CD17,
			a. ICD_DGNS_CD18,
			a. ICD_DGNS_CD19,
			a. ICD_DGNS_CD20,
			a. ICD_DGNS_CD21,
			a. ICD_DGNS_CD22,
			a. ICD_DGNS_CD23,
			a. ICD_DGNS_CD24,
			a. ICD_DGNS_CD25,
/*Diagnosis Codes*/			
			a. ICD_PRCDR_CD1,
			a. ICD_PRCDR_CD2,
			a. ICD_PRCDR_CD3,
			a. ICD_PRCDR_CD4,
			a. ICD_PRCDR_CD5,
			a. ICD_PRCDR_CD6,
			a. ICD_PRCDR_CD7,
			a. ICD_PRCDR_CD8,
			a. ICD_PRCDR_CD9,
			a. ICD_PRCDR_CD10,
			a. ICD_PRCDR_CD11,
			a. ICD_PRCDR_CD12,
			a. ICD_PRCDR_CD13,
			a. ICD_PRCDR_CD14,
			a. ICD_PRCDR_CD15,
			a. ICD_PRCDR_CD16,
			a. ICD_PRCDR_CD17,
			a. ICD_PRCDR_CD18,
			a. ICD_PRCDR_CD19,
			a. ICD_PRCDR_CD20,
			a. ICD_PRCDR_CD21,
			a. ICD_PRCDR_CD22,
			a. ICD_PRCDR_CD23,
			a. ICD_PRCDR_CD24,
			a. ICD_PRCDR_CD25,
/*DRG*/
			"NA" as CLM_DRG_CD,
			c.HCPCS,
/*Add dollars*/
			a.CLM_TOT_CHRG_AMT,
			a.CLM_PMT_AMT,
			0 as TOTAL_Clm_amt,
			0 as NCH_BENE_IP_DDCTBL_AMT,
			0 as NCH_BENE_PTA_COINSRNC_LBLTY_AM,
			a.NCH_PRMRY_PYR_CLM_PD_AMT,
            a.NCH_BENE_PTB_DDCTBL_AMT,
			a.NCH_BENE_PTB_COINSRNC_AMT,
			a.CLM_OP_PRVDR_PMT_AMT,
			a.CLM_OP_BENE_PMT_AMT,
			d.REV_CNTR_TOT_CHRG_AMT
	from &libs..&type._claims_&mo. as a
	/*limit to target memebr*/ 
	inner join &out..memberlist_2020 as b on a. bene_id = b. bene_id /*and year(a.CLM_THRU_DT) = b.year*/ 
	/*Identify HIV claims*/
	left join &out..Revenue_HIV c on a.Bene_id = c.bene_id and a.clm_id = c.clm_id
	left join  RIFQ20&yr..&TYPE._revenue_&mo. d on a.Bene_id = d.bene_id and a.clm_id = d.clm_id
	where a. CLM_MDCR_NON_PMT_RSN_CD = ''
	and a. clm_pmt_amt > 0;

quit;

%end;

/*BCARRIER AND DME CLAIMS HAVE DIFFERENT TABLES WITH DIFFERENT FIELDS*/
%else %if &typetext. = "bcarrier" or &typetext. =  "DME" %then %do;

proc sql;
/*BW For bcarrier and dme, HEADER, not line, has DGNS (and only 12x, not 25x) and DOB_DT. Updated table references. Also blanking PRCDR since this is not available on header nor line.*/
	create table MSSP_claims_&type._&yr2._&mo. as
	select a. bene_id,
		d. clm_id,
		a. DOB_DT,
		   year(d.LINE_LAST_EXPNS_DT) as year,
		   year(d.LINE_LAST_EXPNS_DT) * 100 + month(d.LINE_LAST_EXPNS_DT) as yearmo,
			&typetext. as POS,
			a. PRNCPAL_DGNS_CD,
			a. ICD_DGNS_CD1,
			a. ICD_DGNS_CD2,
			a. ICD_DGNS_CD3,
			a. ICD_DGNS_CD4,
			a. ICD_DGNS_CD5,
			a. ICD_DGNS_CD6,
			a. ICD_DGNS_CD7,
			a. ICD_DGNS_CD8,
			a. ICD_DGNS_CD9,
			a. ICD_DGNS_CD10,
			a. ICD_DGNS_CD11,
			a. ICD_DGNS_CD12,
			/*edit 03.09* - add hcpcs_cd here instead of having to pull again later*/
			b. hcpcs_cd,
			"NA" as ICD_DGNS_CD13,
			"NA" as ICD_DGNS_CD14,
			"NA" as ICD_DGNS_CD15,
			"NA" as ICD_DGNS_CD16,
			"NA" as ICD_DGNS_CD17,
			"NA" as ICD_DGNS_CD18,
			"NA" as ICD_DGNS_CD19,
			"NA" as ICD_DGNS_CD20,
			"NA" as ICD_DGNS_CD21,
			"NA" as ICD_DGNS_CD22,
			"NA" as ICD_DGNS_CD23,
			"NA" as ICD_DGNS_CD24,
			"NA" as ICD_DGNS_CD25,
/*Diagnosis Codes*/			
		"NA" as ICD_PRCDR_CD1,
		"NA" as ICD_PRCDR_CD2,
		"NA" as ICD_PRCDR_CD3,
		"NA" as ICD_PRCDR_CD4,
		"NA" as ICD_PRCDR_CD5,
		"NA" as ICD_PRCDR_CD6,
		"NA" as ICD_PRCDR_CD7,
		"NA" as ICD_PRCDR_CD8,
		"NA" as ICD_PRCDR_CD9,
		"NA" as ICD_PRCDR_CD10,
		"NA" as ICD_PRCDR_CD11,
		"NA" as ICD_PRCDR_CD12,
		"NA" as ICD_PRCDR_CD13,
		"NA" as ICD_PRCDR_CD14,
		"NA" as ICD_PRCDR_CD15,
		"NA" as ICD_PRCDR_CD16,
		"NA" as ICD_PRCDR_CD17,
		"NA" as ICD_PRCDR_CD18,
		"NA" as ICD_PRCDR_CD19,
		"NA" as ICD_PRCDR_CD20,
		"NA" as ICD_PRCDR_CD21,
		"NA" as ICD_PRCDR_CD22,
		"NA" as ICD_PRCDR_CD23,
		"NA" as ICD_PRCDR_CD24,
		"NA" as ICD_PRCDR_CD25,
/*DRG*/
			"NA" as CLM_DRG_CD,
			c.HCPCS,
/*Add dollars*/
			a.CLM_TOT_CHRG_AMT,
			a.CLM_PMT_AMT,
			0 as CAL_TOTAL_Clm_amt,
			0 as NCH_BENE_IP_DDCTBL_AMT,
			0 as NCH_BENE_PTA_COINSRNC_LBLTY_AM,
			a.CARR_CLM_PRMRY_PYR_PD_AMT  as NCH_PRMRY_PYR_CLM_PD_AMT,
            0 as a.NCH_BENE_PTB_DDCTBL_AMT,
			0 as a.NCH_BENE_PTB_COINSRNC_AMT,
			a.NCH_CLM_PRVDR_PMT_AMT as PRVDR_PMT,
			a.CLM_BENE_PD_AMT as BENE_PMT,
			d.LINE_NCH_PMT_AMT as REV_CNTR_TOT_CHRG_AMT
	from &libs..&type._claims_&mo. as a 
	/*limit to target memebr*/ 
	inner join &out..memberlist_2020 as b on a. bene_id = b. bene_id /*and year(a.CLM_THRU_DT) = b.year*/ 
	/*Identify HIV claims*/
	left join &out..Revenue_HIV c on a.Bene_id = c.bene_id and a.clm_id = c.clm_id
	/*data validation*/
	left join &libs..&type._line_&mo. as d on a. bene_id = d. bene_id and a. clm_id = d. clm_id
	where a.CARR_CLM_PMT_DNL_CD not in ('0', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'P', 'Q', 'T', 'U', 'V', 'X', 'Y')
		and d.LINE_PRCSG_IND_CD in ('A', 'R', 'S')
		and d.LINE_NCH_PMT_AMT > 0;

quit;

%end;

%mend process1;

%macro pullyear(libs,yr,yr2);

%process1(&libs.,inpatient,"inpatient",&yr.,&yr2.,01);
%process1(&libs.,inpatient,"inpatient",&yr.,&yr2.,02);
%process1(&libs.,inpatient,"inpatient",&yr.,&yr2.,03);
%process1(&libs.,inpatient,"inpatient",&yr.,&yr2.,04);
%process1(&libs.,inpatient,"inpatient",&yr.,&yr2.,05);
%process1(&libs.,inpatient,"inpatient",&yr.,&yr2.,06);
	%process1(&libs.,inpatient,"inpatient",&yr.,&yr2.,07);
	%process1(&libs.,inpatient,"inpatient",&yr.,&yr2.,08);
	%process1(&libs.,inpatient,"inpatient",&yr.,&yr2.,09);
	%process1(&libs.,inpatient,"inpatient",&yr.,&yr2.,10);
	%process1(&libs.,inpatient,"inpatient",&yr.,&yr2.,11);
	%process1(&libs.,inpatient,"inpatient",&yr.,&yr2.,12);


%process1(&libs.,SNF,"SNF",&yr.,&yr2.,01);
%process1(&libs.,SNF,"SNF",&yr.,&yr2.,02);
%process1(&libs.,SNF,"SNF",&yr.,&yr2.,03);
%process1(&libs.,SNF,"SNF",&yr.,&yr2.,04);
%process1(&libs.,SNF,"SNF",&yr.,&yr2.,05);
%process1(&libs.,SNF,"SNF",&yr.,&yr2.,06);
	%process1(&libs.,SNF,"SNF",&yr.,&yr2.,07);
	%process1(&libs.,SNF,"SNF",&yr.,&yr2.,08);
	%process1(&libs.,SNF,"SNF",&yr.,&yr2.,09);
	%process1(&libs.,SNF,"SNF",&yr.,&yr2.,10);
	%process1(&libs.,SNF,"SNF",&yr.,&yr2.,11);
	%process1(&libs.,SNF,"SNF",&yr.,&yr2.,12);


%process1(&libs.,outpatient,"outpatient",&yr.,&yr2.,01);
%process1(&libs.,outpatient,"outpatient",&yr.,&yr2.,02);
%process1(&libs.,outpatient,"outpatient",&yr.,&yr2.,03);
%process1(&libs.,outpatient,"outpatient",&yr.,&yr2.,04);
%process1(&libs.,outpatient,"outpatient",&yr.,&yr2.,05);
%process1(&libs.,outpatient,"outpatient",&yr.,&yr2.,06);
	%process1(&libs.,outpatient,"outpatient",&yr.,&yr2.,07);
	%process1(&libs.,outpatient,"outpatient",&yr.,&yr2.,08);
	%process1(&libs.,outpatient,"outpatient",&yr.,&yr2.,09);
	%process1(&libs.,outpatient,"outpatient",&yr.,&yr2.,10);
	%process1(&libs.,outpatient,"outpatient",&yr.,&yr2.,11);
	%process1(&libs.,outpatient,"outpatient",&yr.,&yr2.,12);


%process1(&libs.,hha,"hha",&yr.,&yr2.,01);
%process1(&libs.,hha,"hha",&yr.,&yr2.,02);
%process1(&libs.,hha,"hha",&yr.,&yr2.,03);
%process1(&libs.,hha,"hha",&yr.,&yr2.,04);
%process1(&libs.,hha,"hha",&yr.,&yr2.,05);
%process1(&libs.,hha,"hha",&yr.,&yr2.,06);
	%process1(&libs.,hha,"hha",&yr.,&yr2.,07);
	%process1(&libs.,hha,"hha",&yr.,&yr2.,08);
	%process1(&libs.,hha,"hha",&yr.,&yr2.,09);
	%process1(&libs.,hha,"hha",&yr.,&yr2.,10);
	%process1(&libs.,hha,"hha",&yr.,&yr2.,11);
	%process1(&libs.,hha,"hha",&yr.,&yr2.,12);


%process1(&libs.,hospice,"hospice",&yr.,&yr2.,01);
%process1(&libs.,hospice,"hospice",&yr.,&yr2.,02);
%process1(&libs.,hospice,"hospice",&yr.,&yr2.,03);
%process1(&libs.,hospice,"hospice",&yr.,&yr2.,04);
%process1(&libs.,hospice,"hospice",&yr.,&yr2.,05);
%process1(&libs.,hospice,"hospice",&yr.,&yr2.,06);
	%process1(&libs.,hospice,"hospice",&yr.,&yr2.,07);
	%process1(&libs.,hospice,"hospice",&yr.,&yr2.,08);
	%process1(&libs.,hospice,"hospice",&yr.,&yr2.,09);
	%process1(&libs.,hospice,"hospice",&yr.,&yr2.,10);
	%process1(&libs.,hospice,"hospice",&yr.,&yr2.,11);
	%process1(&libs.,hospice,"hospice",&yr.,&yr2.,12);


%process1(&libs.,bcarrier,"bcarrier",&yr.,&yr2.,01);
%process1(&libs.,bcarrier,"bcarrier",&yr.,&yr2.,02);
%process1(&libs.,bcarrier,"bcarrier",&yr.,&yr2.,03);
%process1(&libs.,bcarrier,"bcarrier",&yr.,&yr2.,04);
%process1(&libs.,bcarrier,"bcarrier",&yr.,&yr2.,05);
%process1(&libs.,bcarrier,"bcarrier",&yr.,&yr2.,06);
	%process1(&libs.,bcarrier,"bcarrier",&yr.,&yr2.,07);
	%process1(&libs.,bcarrier,"bcarrier",&yr.,&yr2.,08);
	%process1(&libs.,bcarrier,"bcarrier",&yr.,&yr2.,09);
	%process1(&libs.,bcarrier,"bcarrier",&yr.,&yr2.,10);
	%process1(&libs.,bcarrier,"bcarrier",&yr.,&yr2.,11);
	%process1(&libs.,bcarrier,"bcarrier",&yr.,&yr2.,12);


%process1(&libs.,DME,"DME",&yr.,&yr2.,01);
%process1(&libs.,DME,"DME",&yr.,&yr2.,02);
%process1(&libs.,DME,"DME",&yr.,&yr2.,03);
%process1(&libs.,DME,"DME",&yr.,&yr2.,04);
%process1(&libs.,DME,"DME",&yr.,&yr2.,05);
%process1(&libs.,DME,"DME",&yr.,&yr2.,06);
	%process1(&libs.,DME,"DME",&yr.,&yr2.,07);
	%process1(&libs.,DME,"DME",&yr.,&yr2.,08);
	%process1(&libs.,DME,"DME",&yr.,&yr2.,09);
	%process1(&libs.,DME,"DME",&yr.,&yr2.,10);
	%process1(&libs.,DME,"DME",&yr.,&yr2.,11);
	%process1(&libs.,DME,"DME",&yr.,&yr2.,12);

%mend pullyear;

%pullyear(RIFQ2020,20,20q);

*STACK CLAIMS;

data sh054820.&pfx._MSSP_All_Claims ;
	set MSSP_claims_: ;

	month = substr(put(yearmo,6.),5,6);
run;


/***************************************************************
Merger on Enrollment
**************************************************************/
*Merge Enrollment onto Claims;

proc sql;
	create table &out..&pfx._pde_&pdeyr._2 as
	select 
		a.*
		,b.contract
		,b.plan_type
		,b.PBP
		,b.LI
		,b.Enroll_D_only
		,case when b.month is missing then 0 else 1 end as enroll_find
	from &out..&pfx._pde_&pdeyr. as a
	left join &out..&pfx._Member_Enroll as b
	on a.BENE_ID = b.BENE_ID and a.Month = b.Month
	;
quit;
/*BW Dropping table*/
proc sql; drop table &out..&pfx._pde_&pdeyr.; quit;

*Merge Enrollment onto Claims;

proc sql;
	create table &out..&pfx._MSSP_&pdeyr._2 as
	select 
			a.bene_id,
			a.CLM_ID,
			a.year,
			a.month, 
			a.POS,
			a.PRNCPAL_DGNS_CD,			
			a.CLM_DRG_CD,
			a.HCPCS,
			a.CLM_TOT_CHRG_AMT,
			a.CLM_PMT_AMT,
			a.Cal_TOTAL_Clm_amt,
			a.NCH_BENE_IP_DDCTBL_AMT,
			a.NCH_BENE_PTA_COINSRNC_LBLTY_AM,
			a.NCH_PRMRY_PYR_CLM_PD_AMT,
            a.NCH_BENE_PTB_DDCTBL_AMT,
			a.NCH_BENE_PTB_COINSRNC_AMT,
			a.PRVDR_PMT,
			a.BENE_PMT
		,b.contract
		,b.PBP
		,b.plan_type
		,b.LI
		,b.Enroll_D_only
		,case when b.month is missing then 0 else 1 end as enroll_find
	from sh054820.&pfx._MSSP_All_Claims as a
	left join &out..&pfx._Member_Enroll as b
	on a.BENE_ID = b.BENE_ID and a.Month = b.Month
	;
quit;
/*Don't drop the claim table yet, it has ICD*/


/***************************************************************
summary
**************************************************************/

*Define macro Variables for Claims Fields;
%LET CatVarsCl =  Plan_Type LI Enroll_D_only B_G Drug PHRMCY_SRVC_TYPE;
%LET NumVarsCl = scripts QTY_DSPNSD_NUM DAYSSPLY GDCBOOPT GDCAOOPT PTNT_PAY_AMT OTHR_TROOP_AMT LICS_AMT PLRO_AMT CPP_AMT NPP_AMT TOTAL_DRUG_COST_AMT;
		
proc summary nway missing data= &out..&pfx._pde_&pdeyr._2  ;
	class &CatVarsCl.;
	var &NumVarsCl.;
	output out= &out..Pharm_Claim_Summary (drop=_type_ rename=(_freq_=Row_Ct))
	sum=;
run;

*Define macro Variables for Claims Fields;
%LET CatVarsC2 =  Plan_Type LI Enroll_D_only HCPCS POS;
%LET NumVarsC2 = CLM_TOT_CHRG_AMT CLM_PMT_AMT Cal_TOTAL_Clm_amt NCH_BENE_IP_DDCTBL_AMT NCH_BENE_PTA_COINSRNC_LBLTY_AMT NCH_PRMRY_PYR_CLM_PD_AMT 
				NCH_BENE_PTB_DDCTBL_AMT NCH_BENE_PTB_COINSRNC_AMT PRVDR_PMT BENE_PMT REV_CNTR_TOT_CHRG_AMT;
proc summary nway missing data= &out..&pfx._MSSP_&pdeyr._2  ;
	class &CatVarsC2.;
	var &NumVarsC2.;
	output out= &out..Medical_Claim_Summary (drop=_type_ rename=(_freq_=Row_Ct))
	sum=;
run;

/*summarize final fields for Enrollment*/
proc summary data= &out..&pfx._Member_Enroll_Full nway missing;
  	class Plan_Type ;
	var LI Enroll_D_only Enroll;
  	output out= &out..&pfx._Enrollment_ALL (drop=_type_ _freq_) sum =;
run;

/*summarize final fields for HIV Enrollment*/
proc summary data= &out..&pfx._Member_Enroll nway missing;
  	class Plan_Type ;
	var LI Enroll_D_only Enroll;
  	output out= &out..&pfx._Enrollment_HIV (drop=_type_ _freq_) sum =;
run;

Proc sql;
create table Member_count as 
select 
	source, count(distinct bene_id) as member_count
	from &out..memberlist_2020
	group by 1;
quit;
